// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: E:/computer-science/projects/xiaoming-expression/xiaoming-expression-core/src/main/jflex/expression.flex

package cn.codethink.xiaoming.expression.type.acl;

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("all")
public class Scanner extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\4\u1f00"+
    "\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300\14\u1f00"+
    "\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700\25\u0100"+
    "\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00\23\u0100"+
    "\1\u7b00\u0aec\u1f00\1\u7c00\1\u7d00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\2\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\7\6\3\34\1\35\1\36\1\37\5\10\1\40"+
    "\13\10\1\41\2\10\1\42\1\43\1\44\1\6\1\10"+
    "\1\6\1\45\1\46\1\34\1\35\1\47\1\50\5\10"+
    "\1\51\1\10\1\52\3\10\1\53\1\54\1\55\1\56"+
    "\2\10\1\41\2\10\1\57\1\6\1\60\1\6\6\0"+
    "\1\61\32\0\2\6\4\10\4\6\1\10\2\6\1\0"+
    "\7\6\1\10\4\6\1\10\5\6\27\10\1\6\37\10"+
    "\1\6\u01ca\10\4\6\14\10\16\6\5\10\7\6\1\10"+
    "\1\6\1\10\21\6\160\0\5\10\1\6\2\10\2\6"+
    "\4\10\1\6\1\10\6\6\1\10\1\6\3\10\1\6"+
    "\1\10\1\6\24\10\1\6\123\10\1\6\213\10\1\6"+
    "\5\0\2\6\246\10\1\6\46\10\2\6\1\10\6\6"+
    "\51\10\6\6\1\10\1\6\55\0\1\6\1\0\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\10\6\33\10\4\6"+
    "\4\10\15\6\6\0\5\6\1\10\4\6\13\0\1\6"+
    "\1\0\3\6\53\10\37\0\4\6\2\10\1\0\143\10"+
    "\1\6\1\10\10\0\1\6\6\0\2\10\2\0\1\6"+
    "\4\0\2\10\12\0\3\10\2\6\1\10\17\6\1\0"+
    "\1\10\1\0\36\10\33\0\2\6\131\10\13\0\1\10"+
    "\16\6\12\0\41\10\11\0\2\10\4\6\1\10\2\6"+
    "\1\0\30\10\4\0\1\10\11\0\1\10\3\0\1\10"+
    "\5\0\22\6\31\10\3\0\4\6\13\10\5\6\30\10"+
    "\1\6\6\10\1\6\2\0\6\6\10\0\52\10\72\0"+
    "\66\10\3\0\1\10\22\0\1\10\7\0\12\10\2\0"+
    "\2\6\12\0\1\6\20\10\3\0\1\6\10\10\2\6"+
    "\2\10\2\6\26\10\1\6\7\10\1\6\1\10\3\6"+
    "\4\10\2\6\1\0\1\10\7\0\2\6\2\0\2\6"+
    "\3\0\1\10\10\6\1\0\4\6\2\10\1\6\3\10"+
    "\2\0\2\6\12\0\4\10\7\6\2\10\1\6\1\0"+
    "\2\6\3\0\1\6\6\10\4\6\2\10\2\6\26\10"+
    "\1\6\7\10\1\6\2\10\1\6\2\10\1\6\2\10"+
    "\2\6\1\0\1\6\5\0\4\6\2\0\2\6\3\0"+
    "\3\6\1\0\7\6\4\10\1\6\1\10\7\6\14\0"+
    "\3\10\1\0\13\6\3\0\1\6\11\10\1\6\3\10"+
    "\1\6\26\10\1\6\7\10\1\6\2\10\1\6\5\10"+
    "\2\6\1\0\1\10\10\0\1\6\3\0\1\6\3\0"+
    "\2\6\1\10\17\6\2\10\2\0\2\6\12\0\1\6"+
    "\1\10\7\6\1\10\6\0\1\6\3\0\1\6\10\10"+
    "\2\6\2\10\2\6\26\10\1\6\7\10\1\6\2\10"+
    "\1\6\5\10\2\6\1\0\1\10\7\0\2\6\2\0"+
    "\2\6\3\0\7\6\3\0\4\6\2\10\1\6\3\10"+
    "\2\0\2\6\12\0\1\6\1\10\20\6\1\0\1\10"+
    "\1\6\6\10\3\6\3\10\1\6\4\10\3\6\2\10"+
    "\1\6\1\10\1\6\2\10\3\6\2\10\3\6\3\10"+
    "\3\6\14\10\4\6\5\0\3\6\3\0\1\6\4\0"+
    "\2\6\1\10\6\6\1\0\16\6\12\0\11\6\1\10"+
    "\6\6\5\0\10\10\1\6\3\10\1\6\27\10\1\6"+
    "\20\10\2\6\1\0\1\10\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\1\6\3\10\2\6\1\10\2\6"+
    "\2\10\2\0\2\6\12\0\20\6\1\10\3\0\1\6"+
    "\10\10\1\6\3\10\1\6\27\10\1\6\12\10\1\6"+
    "\5\10\2\6\1\0\1\10\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\6\6\2\10\1\6\2\10\2\0"+
    "\2\6\12\0\1\6\2\10\15\6\4\0\11\10\1\6"+
    "\3\10\1\6\51\10\2\0\1\10\7\0\1\6\3\0"+
    "\1\6\4\0\1\10\5\6\3\10\1\0\7\6\3\10"+
    "\2\0\2\6\12\0\12\6\6\10\1\6\3\0\1\6"+
    "\22\10\3\6\30\10\1\6\11\10\1\6\1\10\2\6"+
    "\7\10\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\6\6\12\0\2\6\2\0\15\6\60\10\1\0"+
    "\2\10\7\0\4\6\10\10\10\0\1\6\12\0\47\6"+
    "\2\10\1\6\1\10\1\6\5\10\1\6\30\10\1\6"+
    "\1\10\1\6\12\10\1\0\2\10\11\0\1\10\2\6"+
    "\5\10\1\6\1\10\1\6\6\0\2\6\12\0\2\6"+
    "\4\10\40\6\1\10\27\6\2\0\6\6\12\0\13\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\2\0\10\10"+
    "\1\6\44\10\4\6\24\0\1\6\2\0\5\10\13\0"+
    "\1\6\44\0\11\6\1\0\71\6\53\10\24\0\1\10"+
    "\12\0\6\6\6\10\4\0\4\10\3\0\1\10\3\0"+
    "\2\10\7\0\3\10\4\0\15\10\14\0\1\10\17\0"+
    "\2\6\46\10\1\6\1\10\5\6\1\10\2\6\53\10"+
    "\1\6\115\10\1\6\4\10\2\6\7\10\1\6\1\10"+
    "\1\6\4\10\2\6\51\10\1\6\4\10\2\6\41\10"+
    "\1\6\4\10\2\6\7\10\1\6\1\10\1\6\4\10"+
    "\2\6\17\10\1\6\71\10\1\6\4\10\2\6\103\10"+
    "\2\6\3\0\40\6\20\10\20\6\126\10\2\6\6\10"+
    "\3\6\u016c\10\2\6\21\10\1\6\32\10\5\6\113\10"+
    "\3\6\13\10\7\6\22\10\4\0\11\6\23\10\3\0"+
    "\13\6\22\10\2\0\14\6\15\10\1\6\3\10\1\6"+
    "\2\0\14\6\64\10\40\0\3\6\1\10\3\6\2\10"+
    "\1\0\2\6\12\0\41\6\17\0\6\6\131\10\7\6"+
    "\5\10\2\0\42\10\1\0\1\10\5\6\106\10\12\6"+
    "\37\10\1\6\14\0\4\6\14\0\12\6\12\0\36\10"+
    "\2\6\5\10\13\6\54\10\4\6\32\10\6\6\12\0"+
    "\46\6\27\10\5\0\4\6\65\10\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\10\10\6\16\0"+
    "\1\6\20\0\61\6\5\0\57\10\21\0\10\10\3\6"+
    "\12\0\21\6\11\0\14\6\3\0\36\10\15\0\2\10"+
    "\12\0\54\10\16\0\14\6\44\10\24\0\10\6\12\0"+
    "\3\6\3\10\12\0\44\10\2\6\11\10\7\6\53\10"+
    "\2\6\3\10\20\6\3\0\1\6\25\0\4\10\1\0"+
    "\6\10\1\0\2\10\3\0\1\10\5\6\300\10\100\0"+
    "\26\10\2\6\6\10\2\6\46\10\2\6\6\10\2\6"+
    "\10\10\1\6\1\10\1\6\1\10\1\6\1\10\1\6"+
    "\37\10\2\6\65\10\1\6\7\10\1\6\1\10\3\6"+
    "\3\10\1\6\7\10\3\6\4\10\2\6\6\10\4\6"+
    "\15\10\5\6\3\10\1\6\7\10\16\6\5\0\30\6"+
    "\2\3\5\0\20\6\2\10\23\6\1\10\13\6\5\0"+
    "\1\6\12\0\1\6\1\10\15\6\1\10\20\6\15\10"+
    "\3\6\41\10\17\6\15\0\4\6\1\0\3\6\14\0"+
    "\21\6\1\10\4\6\1\10\2\6\12\10\1\6\1\10"+
    "\3\6\5\10\6\6\1\10\1\6\1\10\1\6\1\10"+
    "\1\6\4\10\1\6\13\10\2\6\4\10\5\6\5\10"+
    "\4\6\1\10\21\6\51\10\u0177\6\345\10\6\6\4\10"+
    "\3\0\2\10\14\6\46\10\1\6\1\10\5\6\1\10"+
    "\2\6\70\10\7\6\1\10\17\6\1\0\27\10\11\6"+
    "\7\10\1\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\7\10\1\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\40\0\57\6\1\10\325\6\3\10\31\6\11\10\6\0"+
    "\1\6\5\10\2\6\5\10\4\6\126\10\2\6\2\0"+
    "\2\6\3\10\1\6\132\10\1\6\4\10\5\6\53\10"+
    "\1\6\136\10\21\6\40\10\60\6\320\10\100\6\215\10"+
    "\103\6\56\10\2\6\15\10\3\6\20\10\12\0\2\10"+
    "\24\6\57\10\1\0\4\6\12\0\1\6\37\10\2\0"+
    "\120\10\2\0\45\6\11\10\2\6\147\10\2\6\100\10"+
    "\5\6\2\10\1\6\1\10\1\6\5\10\30\6\20\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\5\0\4\6"+
    "\1\0\13\6\1\10\7\6\64\10\14\6\2\0\62\10"+
    "\22\0\12\6\12\0\6\6\22\0\6\10\3\6\1\10"+
    "\1\6\2\10\13\0\34\10\10\0\2\6\27\10\15\0"+
    "\14\6\35\10\3\6\4\0\57\10\16\0\16\6\1\10"+
    "\12\0\6\6\5\10\1\0\12\10\12\0\5\10\1\6"+
    "\51\10\16\0\11\6\3\10\1\0\10\10\2\0\2\6"+
    "\12\0\6\6\27\10\3\6\1\10\3\0\62\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0"+
    "\1\10\30\6\3\10\2\6\13\10\5\0\2\6\3\10"+
    "\2\0\12\6\6\10\2\6\6\10\2\6\6\10\11\6"+
    "\7\10\1\6\7\10\1\6\53\10\1\6\16\10\6\6"+
    "\163\10\10\0\1\6\2\0\2\6\12\0\6\6\244\10"+
    "\14\6\27\10\4\6\61\10\4\6\u0100\3\156\10\2\6"+
    "\152\10\46\6\7\10\14\6\5\10\5\6\1\10\1\0"+
    "\12\10\1\6\15\10\1\6\5\10\1\6\1\10\1\6"+
    "\2\10\1\6\2\10\1\6\154\10\41\6\153\10\22\6"+
    "\100\10\2\6\66\10\50\6\15\10\3\6\20\0\20\6"+
    "\20\0\3\6\2\10\30\6\3\10\31\6\1\10\6\6"+
    "\5\10\1\6\207\10\2\6\1\0\4\6\1\10\13\6"+
    "\12\0\7\6\32\10\4\6\1\10\1\6\32\10\13\6"+
    "\131\10\3\6\6\10\2\6\6\10\2\6\6\10\2\6"+
    "\3\10\3\6\2\10\3\6\2\10\22\6\3\0\4\6"+
    "\14\10\1\6\32\10\1\6\23\10\1\6\2\10\1\6"+
    "\17\10\2\6\16\10\42\6\173\10\105\6\65\10\210\6"+
    "\1\0\202\6\35\10\3\6\61\10\17\6\1\0\37\6"+
    "\40\10\15\6\36\10\5\6\46\10\5\0\5\6\36\10"+
    "\2\6\44\10\4\6\10\10\1\6\5\10\52\6\236\10"+
    "\2\6\12\0\6\6\44\10\4\6\44\10\4\6\50\10"+
    "\10\6\64\10\14\6\13\10\1\6\17\10\1\6\7\10"+
    "\1\6\2\10\1\6\13\10\1\6\17\10\1\6\7\10"+
    "\1\6\2\10\103\6\67\10\11\6\26\10\12\6\10\10"+
    "\30\6\6\10\1\6\52\10\1\6\11\10\105\6\6\10"+
    "\2\6\1\10\1\6\54\10\1\6\2\10\3\6\1\10"+
    "\2\6\27\10\12\6\27\10\11\6\37\10\101\6\23\10"+
    "\1\6\2\10\12\6\26\10\12\6\32\10\106\6\70\10"+
    "\6\6\2\10\100\6\1\10\3\0\1\6\2\0\5\6"+
    "\4\0\4\10\1\6\3\10\1\6\35\10\2\6\3\0"+
    "\4\6\1\0\40\6\35\10\3\6\35\10\43\6\10\10"+
    "\1\6\34\10\2\0\31\6\66\10\12\6\26\10\12\6"+
    "\23\10\15\6\22\10\156\6\111\10\67\6\63\10\15\6"+
    "\63\10\15\6\44\10\4\0\10\6\12\0\u0146\6\52\10"+
    "\1\6\2\0\3\6\2\10\116\6\35\10\12\6\1\10"+
    "\10\6\26\10\13\0\37\6\22\10\4\0\52\6\25\10"+
    "\33\6\27\10\11\6\3\0\65\10\17\0\37\6\13\0"+
    "\2\10\2\0\1\10\11\6\4\0\55\10\13\0\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\2\6\31\10\7\6"+
    "\12\0\6\6\3\0\44\10\16\0\1\6\12\0\4\6"+
    "\1\10\2\0\1\10\10\6\43\10\1\0\2\6\1\10"+
    "\11\6\3\0\60\10\16\0\4\10\4\6\4\0\1\6"+
    "\14\0\1\10\1\6\1\10\43\6\22\10\1\6\31\10"+
    "\14\0\6\6\1\0\101\6\7\10\1\6\1\10\1\6"+
    "\4\10\1\6\17\10\1\6\12\10\7\6\57\10\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\10\2\6\2\10"+
    "\2\6\26\10\1\6\7\10\1\6\2\10\1\6\5\10"+
    "\1\6\2\0\1\10\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\10\6\6\1\0\5\6\5\10\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\10\22\0\4\10\5\6"+
    "\12\0\4\6\1\0\3\10\36\6\60\10\24\0\2\10"+
    "\1\6\1\10\10\6\12\0\246\6\57\10\7\0\2\6"+
    "\11\0\27\6\4\10\2\0\42\6\60\10\21\0\3\6"+
    "\1\10\13\6\12\0\46\6\53\10\15\0\1\10\7\6"+
    "\12\0\66\6\33\10\2\6\17\0\4\6\12\0\6\6"+
    "\7\10\271\6\54\10\17\0\145\6\100\10\12\0\25\6"+
    "\10\10\2\6\1\10\2\6\10\10\1\6\2\10\1\6"+
    "\30\10\6\0\1\6\2\0\2\6\4\0\1\10\1\0"+
    "\1\10\2\0\14\6\12\0\106\6\10\10\2\6\47\10"+
    "\7\0\2\6\7\0\1\10\1\6\1\10\1\0\33\6"+
    "\1\10\12\0\50\10\7\0\1\10\4\0\10\6\1\0"+
    "\10\6\1\10\13\0\56\10\20\0\3\6\1\10\22\6"+
    "\111\10\7\6\11\10\1\6\45\10\10\0\1\6\10\0"+
    "\1\10\17\6\12\0\30\6\36\10\2\6\26\0\1\6"+
    "\16\0\111\6\7\10\1\6\2\10\1\6\46\10\6\0"+
    "\3\6\1\0\1\6\2\0\1\6\7\0\1\10\1\0"+
    "\10\6\12\0\6\6\6\10\1\6\2\10\1\6\40\10"+
    "\5\0\1\6\2\0\1\6\5\0\1\10\7\6\12\0"+
    "\u0136\6\23\10\4\0\271\6\1\10\54\6\4\10\37\6"+
    "\232\10\146\6\157\10\21\6\304\10\u014c\6\141\10\17\6"+
    "\57\10\1\6\11\0\307\6\107\10\271\6\71\10\7\6"+
    "\37\10\1\6\12\0\6\6\117\10\1\6\12\0\6\6"+
    "\36\10\2\6\5\0\13\6\60\10\7\0\11\6\4\10"+
    "\14\6\12\0\11\6\25\10\5\6\23\10\260\6\100\10"+
    "\200\6\113\10\4\6\1\0\1\10\67\0\7\6\4\0"+
    "\15\10\100\6\2\10\1\6\1\10\1\0\13\6\2\0"+
    "\16\6\370\10\10\6\326\10\52\6\11\10\u01e7\6\4\10"+
    "\1\6\7\10\1\6\2\10\1\6\43\10\55\6\3\10"+
    "\21\6\4\10\10\6\u018c\10\4\6\153\10\5\6\15\10"+
    "\3\6\11\10\7\6\12\10\3\6\2\0\1\6\4\0"+
    "\134\6\56\0\2\6\27\0\u011e\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\10"+
    "\1\6\107\10\1\6\2\10\2\6\1\10\2\6\2\10"+
    "\2\6\4\10\1\6\14\10\1\6\1\10\1\6\7\10"+
    "\1\6\101\10\1\6\4\10\2\6\10\10\1\6\7\10"+
    "\1\6\34\10\1\6\4\10\1\6\5\10\1\6\1\10"+
    "\3\6\7\10\1\6\u0154\10\2\6\31\10\1\6\31\10"+
    "\1\6\37\10\1\6\31\10\1\6\37\10\1\6\31\10"+
    "\1\6\37\10\1\6\31\10\1\6\37\10\1\6\31\10"+
    "\1\6\10\10\2\6\151\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\37\10"+
    "\341\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\325\6\55\10\3\6\7\0\7\10\2\6"+
    "\12\0\4\6\1\10\u0141\6\36\10\1\0\21\6\54\10"+
    "\16\0\5\6\1\10\340\6\7\10\1\6\4\10\1\6"+
    "\2\10\1\6\17\10\1\6\305\10\13\6\7\0\51\6"+
    "\104\10\7\0\1\10\4\6\12\0\u0156\6\1\10\117\6"+
    "\4\10\1\6\33\10\1\6\2\10\1\6\1\10\2\6"+
    "\1\10\1\6\12\10\1\6\4\10\1\6\1\10\1\6"+
    "\1\10\6\6\1\10\4\6\1\10\1\6\1\10\1\6"+
    "\1\10\1\6\3\10\1\6\2\10\1\6\1\10\2\6"+
    "\1\10\1\6\1\10\1\6\1\10\1\6\1\10\1\6"+
    "\1\10\1\6\2\10\1\6\1\10\2\6\4\10\1\6"+
    "\7\10\1\6\4\10\1\6\4\10\1\6\1\10\1\6"+
    "\12\10\1\6\21\10\5\6\3\10\1\6\5\10\1\6"+
    "\21\10\u0134\6\12\0\6\6\340\10\40\6\71\10\7\6"+
    "\336\10\2\6\u0182\10\16\6\u0131\10\37\6\36\10\342\6"+
    "\113\10\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\3\1\2\11\1\12\1\13\3\4\1\14\1\15"+
    "\1\16\2\17\1\20\2\1\2\21\1\1\1\0\1\22"+
    "\1\0\1\2\4\23\1\22\1\24\1\0\1\25\1\26"+
    "\1\0\3\4\1\27\1\30\1\31\2\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\12\27\3\0\1\42"+
    "\2\23\1\0\1\22\2\43\3\4\1\32\1\44\1\45"+
    "\1\46\2\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\2\0\2\23\1\55\1\43\1\4\1\56\1\57\1\0"+
    "\2\23\1\43\1\60\1\0\2\23\1\43\1\0\2\23"+
    "\1\43\1\0\2\23\1\43\1\0\2\23\1\43\1\0"+
    "\2\23\1\43\1\61\2\23\1\0\2\23\1\0\2\23"+
    "\1\0\2\23\1\0\2\23\1\0\2\23\1\0\1\23"+
    "\1\22\1\0\1\22\1\0\4\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\226\0\310\0\226\0\372"+
    "\0\226\0\226\0\226\0\226\0\u012c\0\u015e\0\u0190\0\u01c2"+
    "\0\u01f4\0\226\0\226\0\u0226\0\u0258\0\u028a\0\226\0\226"+
    "\0\u02bc\0\226\0\u02ee\0\226\0\u0320\0\u0352\0\226\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\u0546\0\u0578\0\226\0\u05aa\0\226\0\226\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\226\0\226\0\226\0\u06a4\0\u06d6\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\226\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\226\0\226\0\226"+
    "\0\226\0\u079e\0\u0b54\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\226\0\u0c4e\0\u0c80"+
    "\0\372\0\372\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\372\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\226\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\2\4\1\14\1\15\1\16\1\17"+
    "\1\20\11\21\6\10\1\22\1\4\1\23\3\10\1\24"+
    "\1\10\1\25\2\10\1\26\1\10\1\27\1\30\1\4"+
    "\2\31\1\32\2\31\1\33\1\31\1\34\33\31\1\35"+
    "\16\31\2\36\1\37\2\36\1\40\3\36\1\4\31\36"+
    "\1\41\16\36\64\0\1\5\57\0\1\10\7\0\1\10"+
    "\11\0\20\10\3\0\12\10\2\0\1\10\24\0\1\42"+
    "\57\0\12\43\42\0\1\44\4\0\1\45\60\0\1\43"+
    "\1\0\1\46\1\47\2\50\4\51\2\52\1\0\1\53"+
    "\1\54\1\55\1\56\1\57\5\0\1\54\1\55\1\56"+
    "\30\0\1\43\1\0\12\21\1\0\1\53\1\54\1\55"+
    "\1\56\6\0\1\54\1\55\1\56\10\0\1\10\7\0"+
    "\1\10\11\0\20\10\3\0\1\60\11\10\2\0\2\10"+
    "\7\0\1\10\11\0\20\10\3\0\11\10\1\61\2\0"+
    "\2\10\7\0\1\10\11\0\20\10\3\0\6\10\1\62"+
    "\3\10\2\0\1\10\2\31\1\0\2\31\1\0\1\31"+
    "\1\0\33\31\1\0\16\31\2\0\1\32\57\0\2\63"+
    "\4\0\1\63\1\64\1\63\1\65\10\63\4\66\4\67"+
    "\11\63\1\70\2\63\1\71\1\63\1\72\1\63\1\73"+
    "\1\74\1\63\1\75\3\63\12\0\1\76\52\0\1\37"+
    "\57\0\2\63\4\0\1\63\1\77\1\63\1\100\10\63"+
    "\4\101\4\102\11\63\1\103\2\63\1\104\1\63\1\105"+
    "\1\63\1\106\1\107\1\63\1\110\3\63\24\0\1\111"+
    "\60\0\12\43\1\0\1\53\1\54\1\55\7\0\1\54"+
    "\1\55\11\0\14\112\1\113\45\112\2\45\1\5\2\45"+
    "\1\6\54\45\20\0\1\43\1\0\1\46\1\47\2\50"+
    "\4\51\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\51\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\30\0\1\43\1\0\10\115\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\10\116\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\30\0\1\43\1\0"+
    "\12\52\1\0\1\53\1\54\1\55\7\0\1\54\1\55"+
    "\26\0\1\117\1\0\1\117\2\0\12\120\50\0\1\121"+
    "\15\122\5\0\4\122\11\0\1\10\7\0\1\10\11\0"+
    "\20\10\3\0\4\10\1\123\5\10\2\0\2\10\7\0"+
    "\1\10\11\0\20\10\3\0\4\10\1\124\5\10\2\0"+
    "\2\10\7\0\1\10\11\0\20\10\3\0\11\10\1\125"+
    "\2\0\1\10\22\0\10\67\52\0\10\126\41\0\1\127"+
    "\61\0\1\130\61\0\1\131\10\0\10\132\41\0\1\131"+
    "\10\0\10\133\41\0\1\134\61\0\1\135\61\0\1\136"+
    "\61\0\1\137\61\0\1\140\61\0\1\141\76\0\1\142"+
    "\33\0\14\112\1\143\45\112\14\0\1\113\4\0\1\5"+
    "\60\0\1\43\1\0\10\144\2\52\1\0\1\53\1\54"+
    "\1\55\1\114\6\0\1\54\1\55\1\114\30\0\1\43"+
    "\1\0\10\145\2\52\1\0\1\53\1\54\1\55\1\114"+
    "\6\0\1\54\1\55\1\114\32\0\12\120\50\0\12\120"+
    "\1\0\1\53\1\0\1\55\10\0\1\55\33\0\1\121"+
    "\15\122\1\146\4\0\4\122\1\146\32\0\16\147\1\146"+
    "\4\0\4\147\1\146\10\0\1\10\7\0\1\10\11\0"+
    "\20\10\3\0\7\10\1\150\2\10\2\0\2\10\7\0"+
    "\1\10\11\0\20\10\3\0\4\10\1\151\5\10\2\0"+
    "\2\10\7\0\1\10\11\0\20\10\3\0\2\10\1\152"+
    "\7\10\2\0\1\10\11\0\1\131\101\0\1\153\30\0"+
    "\14\112\1\143\4\112\1\5\40\112\20\0\1\43\1\0"+
    "\10\154\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\155\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\156\1\146\4\0\4\156\1\146\10\0"+
    "\1\10\7\0\1\10\11\0\20\10\3\0\2\10\1\157"+
    "\7\10\2\0\1\10\26\0\1\160\53\0\1\43\1\0"+
    "\10\161\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\162\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\163\1\146\4\0\4\163\1\146\42\0"+
    "\1\164\47\0\1\43\1\0\10\165\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\10\166\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\32\0\16\167\1\146"+
    "\4\0\4\167\1\146\35\0\1\170\54\0\1\43\1\0"+
    "\10\171\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\172\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\173\1\146\4\0\4\173\1\146\40\0"+
    "\1\174\51\0\1\43\1\0\10\175\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\10\176\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\32\0\16\177\1\146"+
    "\4\0\4\177\1\146\36\0\1\200\53\0\1\43\1\0"+
    "\10\201\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\202\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\203\1\146\4\0\4\203\1\146\42\0"+
    "\1\204\47\0\1\43\1\0\10\205\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\10\206\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\32\0\16\207\1\146"+
    "\4\0\4\207\1\146\30\0\1\43\1\0\10\210\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\30\0\1\43\1\0\10\211\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\32\0"+
    "\16\212\1\146\4\0\4\212\1\146\30\0\1\43\1\0"+
    "\10\213\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\214\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\215\1\146\4\0\4\215\1\146\30\0"+
    "\1\43\1\0\10\216\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\30\0\1\43\1\0"+
    "\10\217\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\32\0\16\220\1\146\4\0\4\220"+
    "\1\146\30\0\1\43\1\0\10\221\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\10\222\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\32\0\16\223\1\146"+
    "\4\0\4\223\1\146\30\0\1\43\1\0\10\224\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\30\0\1\43\1\0\10\225\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\32\0"+
    "\16\226\1\146\4\0\4\226\1\146\30\0\1\43\1\0"+
    "\10\227\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\230\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\32\0\16\231\1\146\4\0\4\231\1\146\30\0"+
    "\1\43\1\0\10\232\2\52\1\0\1\53\1\54\1\55"+
    "\1\114\6\0\1\54\1\55\1\114\32\0\16\233\1\146"+
    "\4\0\4\233\1\146\30\0\1\43\1\0\10\234\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\50\0\1\146\10\0\1\146\30\0\1\43\1\0"+
    "\10\235\2\52\1\0\1\53\1\54\1\55\1\114\6\0"+
    "\1\54\1\55\1\114\30\0\1\43\1\0\10\236\2\52"+
    "\1\0\1\53\1\54\1\55\1\114\6\0\1\54\1\55"+
    "\1\114\30\0\1\43\1\0\10\237\2\52\1\0\1\53"+
    "\1\54\1\55\1\114\6\0\1\54\1\55\1\114\30\0"+
    "\1\43\1\0\12\52\1\0\1\53\1\54\1\55\1\114"+
    "\6\0\1\54\1\55\1\114\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\1\1\4\11\5\1\2\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\0\1\1\1\0\6\1\1\11\1\0\2\11"+
    "\1\0\3\1\3\11\2\1\7\11\12\1\3\0\1\11"+
    "\2\1\1\0\6\1\4\11\2\0\6\11\2\0\2\1"+
    "\1\11\4\1\1\0\4\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\11\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 50: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 51: break;
          case 3:
            { yybegin(STRING); string.setLength(0);
            }
            // fall through
          case 52: break;
          case 4:
            { return symbol(IDENTIFIER, yytext());
            }
            // fall through
          case 53: break;
          case 5:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 54: break;
          case 6:
            { return symbol(LPAREN);
            }
            // fall through
          case 55: break;
          case 7:
            { return symbol(RPAREN);
            }
            // fall through
          case 56: break;
          case 8:
            { return symbol(COMMA);
            }
            // fall through
          case 57: break;
          case 9:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 58: break;
          case 10:
            { return symbol(LBRACK);
            }
            // fall through
          case 59: break;
          case 11:
            { return symbol(RBRACK);
            }
            // fall through
          case 60: break;
          case 12:
            { return symbol(LBRACE);
            }
            // fall through
          case 61: break;
          case 13:
            { return symbol(RBRACE);
            }
            // fall through
          case 62: break;
          case 14:
            { string.append( yytext() );
            }
            // fall through
          case 63: break;
          case 15:
            { throw new RuntimeException("Unterminated string at end of line");
            }
            // fall through
          case 64: break;
          case 16:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
            // fall through
          case 65: break;
          case 17:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
            // fall through
          case 66: break;
          case 18:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
            // fall through
          case 67: break;
          case 19:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
            // fall through
          case 68: break;
          case 20:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 69: break;
          case 21:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 70: break;
          case 22:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 71: break;
          case 23:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 72: break;
          case 24:
            { string.append( '\"' );
            }
            // fall through
          case 73: break;
          case 25:
            { string.append( '\'' );
            }
            // fall through
          case 74: break;
          case 26:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
            // fall through
          case 75: break;
          case 27:
            { string.append( '\\' );
            }
            // fall through
          case 76: break;
          case 28:
            { string.append( '\b' );
            }
            // fall through
          case 77: break;
          case 29:
            { string.append( '\f' );
            }
            // fall through
          case 78: break;
          case 30:
            { string.append( '\n' );
            }
            // fall through
          case 79: break;
          case 31:
            { string.append( '\r' );
            }
            // fall through
          case 80: break;
          case 32:
            { string.append( '\t' );
            }
            // fall through
          case 81: break;
          case 33:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
            // fall through
          case 82: break;
          case 34:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
            // fall through
          case 83: break;
          case 35:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
            // fall through
          case 84: break;
          case 36:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
            // fall through
          case 85: break;
          case 37:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
            // fall through
          case 86: break;
          case 38:
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
            }
            // fall through
          case 87: break;
          case 39:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
            // fall through
          case 88: break;
          case 40:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
            // fall through
          case 89: break;
          case 41:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
            // fall through
          case 90: break;
          case 42:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
            // fall through
          case 91: break;
          case 43:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
            // fall through
          case 92: break;
          case 44:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
            // fall through
          case 93: break;
          case 45:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
            // fall through
          case 94: break;
          case 46:
            { return symbol(NULL_LITERAL);
            }
            // fall through
          case 95: break;
          case 47:
            { return symbol(BOOLEAN_LITERAL, true);
            }
            // fall through
          case 96: break;
          case 48:
            { return symbol(BOOLEAN_LITERAL, false);
            }
            // fall through
          case 97: break;
          case 49:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
